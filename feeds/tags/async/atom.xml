<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog.maizy.ru - async</title><link href="https://blog.maizy.ru/" rel="alternate"></link><link href="https://blog.maizy.ru/feeds/tags/async/atom.xml" rel="self"></link><id>https://blog.maizy.ru/</id><updated>2015-04-13T00:00:00+03:00</updated><entry><title>Отличие Future от Promise</title><link href="https://blog.maizy.ru/posts/future-vs-promise" rel="alternate"></link><published>2015-04-13T00:00:00+03:00</published><updated>2015-04-13T00:00:00+03:00</updated><author><name>Никита Ковалев</name></author><id>tag:blog.maizy.ru,2015-04-13:/posts/future-vs-promise</id><summary type="html">&lt;p&gt;Недавно пытался на пальцах объяснить отличие Future от Promise. Понятия эти очень близкие, даже &lt;a href="http://en.wikipedia.org/wiki/Futures_and_promises"&gt;статья на Wikipedia&lt;/a&gt; про них одна.&lt;/p&gt;
&lt;p&gt;Как правило Future и Promise используются как контейнер, для представления данных, которых пока нет, но уже можно сформировать цепочку их обработки. Реализации, которые мне известны: &lt;a href="https://twistedmatrix.com/documents/14.0.1/core/howto/defer.html"&gt;Deffered в Twisted&lt;/a&gt;, &lt;a href="https://docs.python.org/3/library/concurrent.futures.html#future-objects"&gt;Future в python 3&lt;/a&gt;, его &lt;a href="http://www.tornadoweb.org/en/branch3.2/concurrent.html?highlight=future#tornado.concurrent.Future"&gt;примитивный backport в tornado&lt;/a&gt; и &lt;a href="https://api.jquery.com/category/deferred-object/"&gt;Deffered в jQuery&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Мне нравится такое определение разницы:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Future&lt;/strong&gt; – это контейнер, на результат которого вы &lt;em&gt;подписываетесь&lt;/em&gt;, но не управляете его появлением.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Promise&lt;/strong&gt; – это контейнер, результат в который вы &lt;em&gt;предоставляете&lt;/em&gt; и сами управляете его появлением в будущем.&lt;/p&gt;
&lt;p&gt;Условно можно считать Future "переменной", а Promise "функцией по установке переменной". Логично, что во многих реализациях эти объекты порождаются парами. Иногда даже эти понятия смешивают в один контейнер, который предоставляет реализации обоих задач, например, так сделано в jQuery и python. Но даже, если реализация смешана, полезно каким-либо образом, хотя бы в соглашениях понимать имеете ли вы право "зажечь" контейнер или имеете право только подписываться на него.&lt;/p&gt;
&lt;p&gt;За Future не нужно следить и можно считать, что код который их вернул обязательно когда-нибудь вызовет ваши callback'и. За Promise же вы ответственны и должны не забыть вызвать его в любом случае, даже если ваш код упал с какой-то ожидаемой или не ожидаемой ошибкой.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Недавно пытался на пальцах объяснить отличие Future от Promise. Понятия эти очень близкие, даже &lt;a href="http://en.wikipedia.org/wiki/Futures_and_promises"&gt;статья на Wikipedia&lt;/a&gt; про них одна.&lt;/p&gt;
&lt;p&gt;Как правило Future и Promise используются как контейнер, для представления данных, которых пока нет, но уже можно сформировать цепочку их обработки. Реализации, которые мне известны: &lt;a href="https://twistedmatrix.com/documents/14.0.1/core/howto/defer.html"&gt;Deffered в Twisted&lt;/a&gt;, &lt;a href="https://docs.python.org/3/library/concurrent.futures.html#future-objects"&gt;Future в python 3&lt;/a&gt;, его &lt;a href="http://www.tornadoweb.org/en/branch3.2/concurrent.html?highlight=future#tornado.concurrent.Future"&gt;примитивный backport в tornado&lt;/a&gt; и &lt;a href="https://api.jquery.com/category/deferred-object/"&gt;Deffered в jQuery&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Мне нравится такое определение разницы:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Future&lt;/strong&gt; – это контейнер, на результат которого вы &lt;em&gt;подписываетесь&lt;/em&gt;, но не управляете его появлением.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Promise&lt;/strong&gt; – это контейнер, результат в который вы &lt;em&gt;предоставляете&lt;/em&gt; и сами управляете его появлением в будущем.&lt;/p&gt;
&lt;p&gt;Условно можно считать Future "переменной", а Promise "функцией по установке переменной". Логично, что во многих реализациях эти объекты порождаются парами. Иногда даже эти понятия смешивают в один контейнер, который предоставляет реализации обоих задач, например, так сделано в jQuery и python. Но даже, если реализация смешана, полезно каким-либо образом, хотя бы в соглашениях понимать имеете ли вы право "зажечь" контейнер или имеете право только подписываться на него.&lt;/p&gt;
&lt;p&gt;За Future не нужно следить и можно считать, что код который их вернул обязательно когда-нибудь вызовет ваши callback'и. За Promise же вы ответственны и должны не забыть вызвать его в любом случае, даже если ваш код упал с какой-то ожидаемой или не ожидаемой ошибкой.&lt;/p&gt;</content><category term="async"></category></entry></feed>