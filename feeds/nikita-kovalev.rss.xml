<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>blog.maizy.ru</title><link>http://blog.maizy.ru/</link><description></description><atom:link href="http://blog.maizy.ru.local/feeds/nikita-kovalev.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 13 Apr 2015 00:00:00 +0300</lastBuildDate><item><title>Отличие Future от Promise</title><link>http://blog.maizy.ru/posts/future-vs-promise</link><description>&lt;p&gt;Недавно пытался на пальцах объяснить отличие Future от Promise. Понятия эти очень близкие, даже &lt;a href="http://en.wikipedia.org/wiki/Futures_and_promises"&gt;статья на Wikipedia&lt;/a&gt; про них одна.&lt;/p&gt;
&lt;p&gt;Как правило Future и Promise используются как контейнер, для представления данных, которых пока нет, но уже можно сформировать цепочку их обработки. Реализации, которые мне известны: &lt;a href="https://twistedmatrix.com/documents/14.0.1/core/howto/defer.html"&gt;Deffered в Twisted&lt;/a&gt;, &lt;a href="https://docs.python.org/3/library/concurrent.futures.html#future-objects"&gt;Future в python 3&lt;/a&gt;, его &lt;a href="http://www.tornadoweb.org/en/branch3.2/concurrent.html?highlight=future#tornado.concurrent.Future"&gt;примитивный backport в tornado&lt;/a&gt; и &lt;a href="https://api.jquery.com/category/deferred-object/"&gt;Deffered в jQuery&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Мне нравится такое определение разницы:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Future&lt;/strong&gt; – это контейнер, на результат которого вы &lt;em&gt;подписываетесь&lt;/em&gt;, но не управляете его появлением.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Promise&lt;/strong&gt; – это контейнер, результат в который вы &lt;em&gt;предоставляете&lt;/em&gt; и сами управляете его появлением в будущем.&lt;/p&gt;
&lt;p&gt;Условно можно считать Future "переменной", а Promise "функцией по установке переменной". Логично, что во многих реализациях эти объекты порождаются парами. Иногда даже эти понятия смешивают в один контейнер, который предоставляет реализации обоих задач, например, так сделано в jQuery и python. Но даже, если реализация смешана, полезно каким-либо образом, хотя бы в соглашениях понимать имеете ли вы право "зажечь" контейнер или имеете право только подписываться на него.&lt;/p&gt;
&lt;p&gt;За Future не нужно следить и можно считать, что код который их вернул обязательно когда-нибудь вызовет ваши callback'и. За Promise же вы ответственны и должны не забыть вызвать его в любом случае, даже если ваш код упал с какой-то ожидаемой или не ожидаемой ошибкой.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Никита Ковалев</dc:creator><pubDate>Mon, 13 Apr 2015 00:00:00 +0300</pubDate><guid>tag:blog.maizy.ru,2015-04-13:posts/future-vs-promise</guid><category>async</category></item><item><title>Использование ansible в Docker контейнерах</title><link>http://blog.maizy.ru/posts/ansible-in-docker</link><description>&lt;p&gt;Для решения задачи настройки сервера уже давно придумали много вещей лучше, чем просто bash скрипт. Я в частности, использую &lt;a href="http://docs.ansible.com/index.html"&gt;ansible&lt;/a&gt;. Но для создания docker контейнеров &lt;a href="https://docs.docker.com/reference/builder/"&gt;по прежнему предлагается&lt;/a&gt; механизм который не далеко ушёл от bash скриптов.&lt;/p&gt;
&lt;p&gt;Мне понадобилось строить на сервере набор контейнеров, причём полностью автоматизировано. Если создание docker images на основе Dockerfile и работа с готовыми контейнерами в ansible решается из коробки, то с настройкой контейнеров через ansible пришлось немного извратиться.&lt;/p&gt;
&lt;p&gt;Идея простая:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;сделать базовый image в docker в котором через Dockerfile устанавливается только ansible,&lt;/li&gt;
&lt;li&gt;засинхронизировать с локальной машины на хост машину все файлы, нужные для ansible - роли, настройки и таски,&lt;/li&gt;
&lt;li&gt;создать контейнер,&lt;/li&gt;
&lt;li&gt;засинхронизированные настройки подключить в volume внутри контейнера,&lt;/li&gt;
&lt;li&gt;запустить ansible-playbook через docker exec,&lt;/li&gt;
&lt;li&gt;готовые контейнеры при необходимости коммитяться и используются как основа для других контейнеров.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Плюсы ansible здесь – идемпотентность, готовые модули и возможность использовать некоторые роли, как для хост машин, так и для контейнеров. Например, у меня есть абстрактная роль &lt;code&gt;nginx&lt;/code&gt; и отдельная роль поверх неё &lt;code&gt;nginx_container&lt;/code&gt; со спецификой для контейнеров.&lt;/p&gt;
&lt;p&gt;То что получилось и подробности работы можно посмотреть в &lt;a href="https://github.com/scala-moscow/deploy"&gt;репозитории scala-moscow/deploy&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Никита Ковалев</dc:creator><pubDate>Thu, 02 Apr 2015 00:00:00 +0300</pubDate><guid>tag:blog.maizy.ru,2015-04-02:posts/ansible-in-docker</guid><category>ansible</category><category>docker</category></item><item><title>Почему я завёл этот блог.</title><link>http://blog.maizy.ru/posts/why</link><description>&lt;p&gt;TODO: Текст, текст.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Никита Ковалев</dc:creator><pubDate>Thu, 02 Apr 2015 00:00:00 +0300</pubDate><guid>tag:blog.maizy.ru,2015-04-02:posts/why</guid></item></channel></rss>